ARG from
FROM ${from} as node-base
LABEL org.opencontainers.image.authors="armando.ucf@gmail.com"

ARG uname=ezdev

#ENV TZ=UTC
#RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

SHELL ["/bin/bash", "-c"]

USER root

RUN apk add --no-cache \
  libstdc++ 

COPY container-scripts/entrypoint.d/ezdev/40-node.sh /opt/container-scripts/entrypoint.d/ezdev/

FROM node-base as node-build

ENV NODE_VERSION 21.7.1

RUN apk add --no-cache --virtual .build-deps \
      curl \
    && ARCH= OPENSSL_ARCH='linux*' && alpineArch="$(apk --print-arch)" \
      && case "${alpineArch##*-}" in \
        x86_64) ARCH='x64' CHECKSUM="80e5f4e1846e0d2692e58a9fc8c36dfba74d558ff02d0a53aa3bf5ba50a06778" OPENSSL_ARCH=linux-x86_64;; \
        x86) OPENSSL_ARCH=linux-elf;; \
        aarch64) OPENSSL_ARCH=linux-aarch64;; \
        arm*) OPENSSL_ARCH=linux-armv4;; \
        ppc64le) OPENSSL_ARCH=linux-ppc64le;; \
        s390x) OPENSSL_ARCH=linux-s390x;; \
        *) ;; \
      esac \
  && mkdir /opt/node \
  && if [ -n "${CHECKSUM}" ]; then \
      set -eu; \
      curl -fsSLO --compressed "https://unofficial-builds.nodejs.org/download/release/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz"; \
      echo "$CHECKSUM  node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" | sha256sum -c - \
      && tar -xJf "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" -C /opt/node --strip-components=1 --no-same-owner; \
      #&& ln -s /usr/local/bin/node /usr/local/bin/nodejs; \
    else \
      echo "Building from source" \
  # backup build
  && apk add --no-cache --virtual .build-deps-full \
      binutils-gold \
      g++ \
      gcc \
      gnupg \
      libgcc \
      linux-headers \
      make \
      python3 \
  # use pre-existing gpg directory, see https://github.com/nodejs/docker-node/pull/1895#issuecomment-1550389150
  && export GNUPGHOME="$(mktemp -d)" \
  # gpg keys listed at https://github.com/nodejs/node#release-keys
  && for key in \
  4ED778F539E3634C779C87C6D7062848A1AB005C \
  141F07595B7B3FFE74309A937405533BE57C7D57 \
  74F12602B6F1C4E913FAA37AD3A89613643B6201 \
  DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 \
  61FC681DFB92A079F1685E77973F295594EC4689 \
  8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
  C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
  890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 \
  C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
  108F52B48DB57BB0CC439B2997B01419BD92F80A \
  A363A499291CBBC940DD62E41F10027AF002F8B0 \
  ; do \
  gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
  gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
  done \
  && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" \
  && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
  && gpgconf --kill all \
  && rm -rf "$GNUPGHOME" \
  && grep "node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
  && tar -xf "node-v$NODE_VERSION.tar.xz" \
  && cd "node-v$NODE_VERSION" \
  && ./configure \
  && make -j$(getconf _NPROCESSORS_ONLN) V= \
  && make DESIDIR=/opt/node install \
  && apk del .build-deps-full \
  && cd .. \
  && rm -Rf "node-v$NODE_VERSION" \
  && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt; \
  fi \
  && rm -f "node-v$NODE_VERSION-linux-$ARCH-musl.tar.xz" \
  # Remove unused OpenSSL headers to save ~34MB. See this NodeJS issue: https://github.com/nodejs/node/issues/46451
  # && find /opt/node/include/node/openssl/archs -mindepth 1 -maxdepth 1 ! -name "$OPENSSL_ARCH" -exec rm -rf {} \; \
  && apk del .build-deps \ 
  # smoke tests
  #&& node --version \
  #&& npm --version \
  && ln -s /opt/node/bin/* /usr/local/bin \
  && ln -s /opt/node/bin/node /usr/local/bin/nodejs \
  && corepack enable \
  #&& npm install -g @nestjs/cli \
  #&& ln -s /opt/node/bin/nest /usr/local/bin/nest \
  # smoke tests
  && for i in node npm npx pnpm yarn yarnpkg; do echo ${i}:`${i} --version`; done
#&& node --version && npm --version && npx --version && pnpm --version && pnpx --version && yarn --version && yarnpkg --version 

FROM node-base as node-dev

COPY --from=node-build /opt/node /opt/node

RUN ln -s /opt/node/bin/* /usr/local/bin \
  && ln -s /opt/node/bin/node /usr/local/bin/nodejs \
  && corepack enable;

USER ${uname}
RUN SHELL=bash pnpm setup

USER root

FROM node-base as node-prod

COPY --from=node-build /opt/node /opt/node

RUN ln -s /opt/node/bin/* /usr/local/bin \
  && ln -s /opt/node/bin/node /usr/local/bin/nodejs \
  && corepack enable;

USER ${uname}
RUN SHELL=bash pnpm setup

USER root

CMD [ "node" ]